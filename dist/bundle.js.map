{"version":3,"file":"bundle.js","sources":["../src/transform.js","../src/store.js","../src/mixin.js","../src/v-node.vue","../src/v-leaf.vue","../src/v-branch.vue","../src/index.vue","../src/index.js"],"sourcesContent":["/**\n * standardlize a normal tree object\n * \n * @param data   data to be transformed\n * @param conf   contains keys to extract data from `data`\n * @param level  identifier inferring depth\n */\nconst transform = (data = {}, conf = {}, level = '0', path = '') => {\n  let newConf = Object.assign({}, conf, defaultConf);\n  \n  let { node, branch, leaf, checked, open } = newConf;\n  let name = data[node] || '';\n  let branches = data[branch] || [];\n  let leafs   = data[leaf] || [];\n  let canOpen  = branches.length > 0 || leafs.length > 0;\n\n  branches = branches.map((branch, i) => {\n    return transform(branch, newConf, `${level}.${i}`, `${path}/${branch.name}`);\n  });\n  \n  leafs = leafs.map((leaf, i) => {\n    return {\n      checked,\n      name: leaf,\n      level: `${level}.${i}`,\n      path: `${path}/${leaf}`\n    };\n  });\n\n  return {\n    name,\n    level,\n    path,\n    node: { name, open, canOpen, checked, level },\n    branches,\n    leafs\n  };\n};\n\nconst defaultConf = {\n  node: 'name',\n  branch: 'dirs',\n  leaf: 'files',\n  open: false,\n  checked: false\n};\n\nmodule.exports = {\n  transform,\n  defaultConf\n};\n","const { transform, defaultConf } = require('../src/transform');\nconst arrPush = [].push;\n\nmodule.exports = {\n  dataStore: transform({}),\n\n  /**\n   * 设置初始数据\n   */\n  setStore(data, conf = defaultConf) {\n    return (this.dataStore = transform(data, conf));\n  },\n\n  /**\n   * get parent branch\n   */\n  findParentBranch(levelId = '') {\n    let length = levelId.length;\n    let branch = this.dataStore;\n\n    if (length <= 1) {\n      return null;\n    }\n    \n    let lvs    = levelId.split('.').slice(1, -1);\n    let index  = 0;\n\n    while (branch && (index = lvs.shift())) {\n      branch = branch.branches[index];\n    }\n\n    return branch;\n  },\n\n  /**\n   * get current branch\n   */\n  findCurrentBranch(levelId = '') {\n    let lvs    = levelId.split('.').slice(1);\n    let index  = 0;\n    let branch = this.dataStore;\n\n    while (branch && (index = lvs.shift())) {\n      branch = branch.branches[index];\n    }\n\n    return branch;\n  },\n\n  /**\n   * @param data     replace empty branch\n   * @param levelId  inditifying where to replace\n   * @param conf     contains keys to extract data from `data` \n   */\n  replaceBranch(data, levelId = '0', conf = defaultConf) {\n    let lvs    = levelId.split('.').slice(1);\n    let index  = 0;\n    let clone  = Object.assign({}, this.dataStore);\n    let parent = clone;\n    let replacePos = lvs.pop();\n\n    while (parent && (index = lvs.shift())) {\n      parent = parent.branches[index];\n    }\n\n    parent.branches[replacePos] = transform(data, conf, levelId);\n\n    return (this.dataStore = clone);\n  },\n\n  getBranchResult(branch) {\n    let result = [];\n    let { node, branches, leafs, path } = branch;\n\n    if (node.checked) {\n      result.push(branch.path);\n    } else {\n      leafs.forEach(({ checked, path }) => {\n        if (checked) {\n          result.push(path);\n        }\n      });\n\n      branches.forEach(branch => {\n        arrPush.apply(result, this.getBranchResult(branch))\n      });\n    }\n\n    return result;\n  },\n\n  getResult() {\n    return this.getBranchResult(this.dataStore)\n  }\n};\n","module.exports = {\n  created() {\n    /**\n     * when the branch is checked/unchecked\n     * all descendents should be checked/unchecked too\n     */\n    this.__EVENT_BUS.$on('descendents_force_checked', (level, checked) => {\n      let lvId = this.data.level;\n\n      if (\n        lvId.indexOf(level) === 0\n        && lvId.slice(level.length).length > 0\n      ) {\n        this.data.checked = checked;\n      }\n    });\n\n\n  }\n};\n","<template>\n  <li class=\"v-node\">\n    <i\n      class=\"fa\"\n      :class=\"[ data.canOpen && data.open ? 'fa-folder-open-o' : 'fa-folder-o' ]\"\n      @click=\"toggleExpanded\"\n    ></i>\n    <span @click=\"toggleChecked\">\n      <i class=\"fa\" :class=\"[ data.checked ? 'fa-check-square-o' : 'fa-square-o' ]\"></i>\n      {{data.name}}\n    </span>\n  </li>\n</template>\n\n<script>\n  import Mixin from './mixin';\n  \n  export default {\n    props: {\n      data: Object,\n    },\n    mixins: [Mixin],\n    methods: {\n      toggleChecked() {\n        this.__EVENT_BUS.$emit('node_toggle_checked', this.data);\n      },\n      toggleExpanded() {\n        this.__EVENT_BUS.$emit('node_toggle_expanded', this.data);\n      }\n    },\n    created() {}\n  };\n</script>\n\n<style lang=\"css\">\n  .v-node {\n    cursor: pointer;\n  }\n  .v-node .fa {\n    width: 20px;\n    color: #0d83e6;\n    text-align: center;\n  }\n  .v-node .fa:hover {\n    color: #0c71c5;\n  }\n</style>","<template>\n  <li class=\"v-leaf\" @click=\"toggleChecked\">\n    <i class=\"fa\" :class=\"[ data.checked ? 'fa-check-square-o' : 'fa-square-o' ]\"></i>\n    {{data.name}}\n  </li>\n</template>\n\n<script>\n  import Mixin from './mixin';\n\n  export default {\n    props: {\n      data: Object\n    },\n    mixins: [Mixin],\n    methods: {\n      toggleChecked() {\n        this.__EVENT_BUS.$emit('leaf_toggle_checked', this.data);\n      }\n    },\n    created() {}\n  };\n</script>\n\n<style lang=\"css\">\n  .v-leaf {\n    margin-left: 27px;\n    cursor: pointer;\n  }\n  .v-leaf .fa {\n    width: 20px;\n    color: #0d83e6;\n    text-align: center;\n  }\n  .v-leaf .fa:hover {\n    color: #0c71c5;\n  }\n</style>","<template>\n  <ul class=\"branch\">\n    <v-node :data=\"node\"></v-node>\n    <v-branch v-show=\"node.open\" v-for=\"branch in branches\" :data=\"branch\"></v-branch>\n    <v-leaf\n      v-show=\"node.open\"\n      v-for=\"leaf in leafs\"\n      :data=\"leaf\"\n    />\n  </ul>\n</template>\n\n<script>\n  import VLeaf from './v-leaf.vue';\n  import VNode from './v-node.vue';\n\n  export default {\n    name: 'v-branch',\n    props: {\n      data: Object\n    },\n    components: {\n      'v-node': VNode,\n      'v-leaf': VLeaf\n    },\n    computed: {\n      branches() {\n        return this.data.branches;\n      },\n      leafs() {\n        return this.data.leafs;\n      },\n      node() {\n        return  this.data.node;\n      }\n    }\n  };\n</script>\n","<template lang=\"html\">\n  <ul class=\"branch\">\n    <v-node :data=\"node\"></v-node>\n    <v-branch v-show=\"node.open\" v-for=\"branch in branches\" :data=\"branch\"></v-branch>\n    <v-leaf v-show=\"node.open\" v-for=\"leaf in leafs\" :data=\"leaf\"></v-leaf>\n  </ul>\n</template>\n\n<script>\n  import store from './store';\n  import VNode from './v-node.vue';\n  import VLeaf from './v-leaf.vue';\n  import VBranch from './v-branch.vue';\n\n  export default {\n    name: 'v-tree-select',\n    props: {\n      data: Object,\n      conf: Object\n    },\n    components: {\n      'v-node': VNode,\n      'v-leaf': VLeaf,\n      'v-branch': VBranch\n    },\n    data() {\n      return {\n        root: store.setStore(this.data, this.conf)\n      };\n    },\n    computed: {\n      branches() {\n        return this.root.branches;\n      },\n      leafs() {\n        return this.root.leafs;\n      },\n      node() {\n        return this.root.node;\n      }\n    },\n    created() {\n      const checkBranchParent = (level, childChecked) => {\n        let branch = store.findParentBranch(level);\n        let nextStatus = false;\n\n        if (branch) {\n          if (childChecked) {\n            let allBranchesChecked = !branch.branches.some(b => !b.node.checked);\n            let allLeavesChecked   = !branch.leafs.some(l => !l.checked);\n            nextStatus = allBranchesChecked && allLeavesChecked;\n          }\n\n          branch.node.checked = nextStatus;\n          checkBranchParent(branch.level, nextStatus);\n        }\n      };\n\n      this.__EVENT_BUS.$on('node_toggle_expanded', node => {\n        node.open = !node.open;\n      });\n\n      this.__EVENT_BUS.$on('node_toggle_checked', node => {\n        let branch = store.findCurrentBranch(node.level);\n        let level  = branch.level;\n        let nextState = !branch.node.checked;\n        \n        branch.node.checked = nextState;\n        branch.branches.forEach(b => b.node.checked = nextState);\n        branch.leafs.forEach(l => l.checked = nextState);\n\n        checkBranchParent(level, nextState);\n        this.__EVENT_BUS.$emit('descendents_force_checked', branch.level, nextState);\n\n        this.$nextTick(() => {\n          this.$emit('change', store.getResult());\n        });\n      });\n\n      this.__EVENT_BUS.$on('leaf_toggle_checked', leaf => {\n        let nextState = !leaf.checked;\n        leaf.checked = nextState;\n        checkBranchParent(leaf.level, nextState);\n\n        this.$nextTick(() => {\n          this.$emit('change', store.getResult());\n        });\n      });\n    }\n  };\n</script>\n\n<style>\n  .branch {\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n    color: #666;\n    font-size: 18px;\n  }\n  .branch > .branch {\n    margin-left: 27px;\n  }\n</style>\n\n\n","import VTreeComponent from './index.vue';\nimport VBranchComponent from './v-branch.vue';\n\nVTreeComponent.install = Vue => {\n  // inject a eventbus\n  Vue.prototype.__EVENT_BUS = new Vue();\n  Vue.use(VBranchComponent);\n  Vue.component(VTreeComponent.name, VTreeComponent);\n};\nVBranchComponent.install = Vue => {\n  Vue.component(VBranchComponent.name, VBranchComponent);\n};\n\nexport default VTreeComponent;\n"],"names":["const","transform","data","conf","level","path","let","newConf","Object","assign","defaultConf","node","branch","leaf","checked","open","name","branches","leafs","canOpen","length","map","i","arrPush","push","dataStore","setStore","this","findParentBranch","levelId","lvs","split","slice","index","shift","findCurrentBranch","replaceBranch","clone","parent","replacePos","pop","getBranchResult","result","forEach","ref","apply","getResult","created","__EVENT_BUS","$on","lvId","indexOf","props","mixins","Mixin","methods","toggleChecked","$emit","toggleExpanded","components","v-node","VNode","v-leaf","VLeaf","computed","v-branch","VBranch","root","store","checkBranchParent","childChecked","nextStatus","allBranchesChecked","some","b","allLeavesChecked","l","nextState","$nextTick","VTreeComponent","install","Vue","prototype","use","VBranchComponent","component"],"mappings":"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"}